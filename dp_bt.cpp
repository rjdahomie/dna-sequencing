#include <iostream>
#include <string>
#include <algorithm> 
#include <vector>

using namespace std;

//Function Declarations
float substitutionScore(string a, string b);
float backtrack(string x, string y, int i, int j, float (&dp)[41][41]);
void printMatrixWithArrows(float (&dp)[41][41]);
void printMatrixNumbers(float (&dp)[41][41]);
void alignment(string x,string y,float (&dp)[41][41]);

float substitutionScore(string a, string b){
    if(a.size() == 0 && b.size() == 0){
        return (0);
    }
    if(a.size() == 0 && b.size() != 0){
        return (-20);
    }
    if(a.size() != 0 && b.size() == 0){
        return (-20);
    }
    if(a == "A" && b == "A"){
        return (100);
    }
    if(a == "G" && b == "G"){
        return (100);
    }
    if(a == "C" && b == "C"){
        return (100);
    }
    if(a == "T" && b == "T"){
        return (100);
    }
    if(a == "G" && b == "A"){
        return (-10);
    }
    if(a == "C" && b == "A"){
        return (-10);
    }
    if(a == "T" && b == "A"){
        return (-15);
    }
    if(a == "C" && b == "G"){
        return (-15);
    }
    if(a == "T" && b == "G"){
        return (-10);
    }
    if(a == "T" && b == "C"){
        return (-10);
    }

    //For Testing Purposes
    return (-40);
}

float backtrack(string x, string y, int i, int j, float (&dp)[41][41]){
    
    if(dp[j*2][i*2] != -100){
        return (dp[j*2][i*2]);
    }

    if (i==0){
        dp[j*2][0] = (j*-20);
        // '|' is 124 in ascii
        if(j!=20){
            dp[j*2+1][0] = 124;
            dp[0][1]=45;
        }
        return (dp[j*2][0]);
    }
    if (j==0){
        dp[0][i*2] = (i*-20);
        // '-' is 45 in ascii
        if(i!=20){
            dp[0][i*2+1] = 45;
        }
        return (dp[0][i*2]);
    }
    
    string lastX = x.substr(i-1, 1);
    string lastY = y.substr(j-1, 1);
    int temp = max(max( backtrack(x,y,i-1,j-1,dp)+substitutionScore(lastX, lastY),
                        backtrack(x,y,i,j-1,dp)+substitutionScore(lastX, "")), 
                        backtrack(x,y,i-1,j,dp)+substitutionScore("", lastY));
    dp[j*2][i*2] = temp;
    if(temp==backtrack(x,y,i-1,j,dp)+substitutionScore("", lastY)){
        dp[j*2][i*2-1] = '-';
    }
    if(temp==backtrack(x,y,i,j-1,dp)+substitutionScore(lastX, "")){
        dp[j*2-1][i*2] = '|';
    }
    if(temp==backtrack(x,y,i-1,j-1,dp)+substitutionScore(lastX, lastY)){
        dp[j*2-1][i*2-1] = '\\';
    }
    return dp[j*2][i*2];
}

void printMatrixWithArrows(float (&dp)[41][41]){
    for (int n = 0; n < 41; n++){
        for(int m = 0; m < 41; m++){
            if(m%2==0 && n%2 == 0 && n!=0 && m!=0){
                dp[n][m]=dp[n][m]/100;
                //cout << dp[n][m];
                cout << "X";
            } else if (n!=0 && m!=0){
                if(dp[n][m] == '-'){
                    cout << "-";
                } else if(dp[n][m] == '|'){
                    cout << "|";
                } else if(dp[n][m] == '\\'){
                    cout << "\\";
                } else {
                    cout << " ";
                }
            }
            if(n==0){
                if(m%2==0){
                    dp[n][m] = dp[n][m]/100;
                    //cout << dp[n][m];
                    cout << "X";
                } else {
                    int a = dp[n][m];
                    cout << ((char)a);
                }
            }
            if(m==0 && n!=0){
                if(n%2==0){
                    dp[n][m] = dp[n][m]/100;
                    //cout << dp[n][m];
                    cout << "X";
                } else {
                    int a = dp[n][m];
                    cout << ((char)a);
                }
            }
        }
        cout << endl;
    }
}


void printMatrixNumbers(float (&dp)[41][41]){
    for (int n = 0; n < 41; n++){
        for(int m = 0; m < 41; m++){
            if(m%2==0 && n%2 == 0){
                cout << dp[n][m] << " ";
            }
        }
        cout << endl;
    }
}

void alignment(string x,string y,float (&dp)[41][41]){
    int i = x.size();
    int j = y.size();
    vector<int> vectorX;
    vector<int> vectorY;
    while(vectorX.size()<20){
        if(dp[i*2-1][j*2-1]=='\\'){
            vectorX.push_back((int)x[i--]);
            vectorY.push_back((int)y[j--]);
            i--;
            j--;
        } else if(dp[i*2-1][j*2]=='-'){
            vectorX.push_back((int)x[i--]);
            vectorY.push_back(95);
            i--;
        } else if(dp[i*2][j*2-1]=='|'){
            vectorX.push_back(95);
            vectorY.push_back((int)y[j--]);
            j--;
        }
        
    }
    for(int m=0; m<20; m++){
        cout << (char)vectorX.at(m) << " ";
    }
    cout << endl;
    for(int n=0; n<20; n++){
        cout << (char)vectorY.at(n) << " ";
    }
    cout << endl;
}

int main(){
    string x = "GTGAACGCTGGCGGCGTGCT";
    string y = "AGCTAATACCCCATACGTTC";
    
    int i = x.size();
    int j = y.size();

    float matrix[41][41] = {
        {-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100},
        {-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100},
        {-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100},
        {-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100},
        {-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100},
        {-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100},
        {-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100},
        {-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100},
        {-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100},
        {-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100},
        {-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100},
        {-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100},
        {-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100},
        {-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100},
        {-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100},
        {-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100},
        {-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100},
        {-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100},
        {-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100},
        {-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100},
        {-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100},
        {-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100},
        {-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100},
        {-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100},
        {-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100},
        {-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100},
        {-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100},
        {-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100},
        {-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100},
        {-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100},
        {-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100},
        {-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100},
        {-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100},
        {-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100},
        {-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100},
        {-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100},
        {-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100},
        {-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100},
        {-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100},
        {-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100},
        {-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100}
        };

    float solution = backtrack(x,y,i,j,matrix);
    cout << "Backtracking table: " << endl;
    printMatrixWithArrows(matrix);
    cout << endl << "Table with values: " << endl;
    printMatrixNumbers(matrix);
    cout << endl << "Best Score: " << solution/100 << endl;
    //alignment(x,y,matrix);
    
}